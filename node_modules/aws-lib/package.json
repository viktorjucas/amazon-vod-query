{
  "name": "aws-lib",
  "description": "Extensible Node.js library for the Amazon Web Services API",
  "version": "0.1.4",
  "homepage": "http://github.com/livelycode/aws-lib",
  "keywords": [
    "amazon",
    "aws",
    "ec2",
    "product advertising",
    "simpledb",
    "Simple Queue Service",
    "SQS",
    "Simple Email Service",
    "SES",
    "Auto Scaling",
    "AS"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/livelycode/aws-lib.git"
  },
  "author": {
    "name": "Mirko Kiefer",
    "email": "mail@mirkokiefer.com",
    "url": "http://mirkokiefer.com"
  },
  "contributors": [
    {
      "name": "Mirko Kiefer",
      "email": "mail@mirkokiefer.com",
      "url": "http://mirkokiefer.com"
    },
    {
      "name": "Paul Bonser",
      "email": "pib@paulbonser.com",
      "url": "http://probablyprogramming.com"
    },
    {
      "name": "Richard Rodger",
      "email": "richard@ricebridge.com",
      "url": "http://www.ricebridge.com/"
    },
    {
      "name": "Ross Duggan",
      "email": "ross@boards.ie",
      "url": "http://rossduggan.ie/"
    },
    {
      "name": "Mike MacCana",
      "email": "mike.maccana@gmail.com",
      "url": "http://mikemaccana.com/"
    }
  ],
  "dependencies": {
    "xml2js": "0.1.x",
    "sax": "0.1.x"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "main": "lib/aws",
  "directories": {
    "lib": "lib",
    "example": "examples",
    "test": "test"
  },
  "engines": {
    "node": ">=0.4"
  },
  "readme": "Node.js library for the Amazon Web Services\n=====\n\nA simple [Node.js](http://github.com/ry/node) library to communicate with the Amazon Web Services API.\n\nThis version of aws-lib has been tested on Node v0.6.11.\n\nIt includes clients for the following services:\n\n   * [EC2](https://github.com/livelycode/aws-lib/blob/master/examples/ec2.js)\n   * [Product Advertising API](https://github.com/livelycode/aws-lib/blob/master/examples/prod-adv.js)\n   * [SimpleDB](https://github.com/livelycode/aws-lib/blob/master/test/simpledb.js)\n   * [SQS (Simple Queue Service)](https://github.com/livelycode/aws-lib/blob/master/examples/sqs.js)\n   * SNS (Simple Notification Service)\n   * [SES (Simple Email Service)](https://github.com/livelycode/aws-lib/blob/master/examples/ses.js)\n   * [ELB (Elastic Load Balancing Service)](https://github.com/livelycode/aws-lib/blob/master/examples/elb.js)\n   * [CW (CloudWatch)](https://github.com/livelycode/aws-lib/blob/master/examples/cw.js)\n   * [IAM (Identity and Access Management)](https://github.com/livelycode/aws-lib/blob/master/examples/iam.js)\n   * [CFN (CloudFormation)](https://github.com/livelycode/aws-lib/blob/master/test/cfn.js)\n   * STS (Security Token Service)\n   * [Elastic MapReduce](https://github.com/livelycode/aws-lib/blob/master/test/emr.js)\n\nRichard Rodger maintains a user-friendly [SimpleDB library](http://github.com/rjrodger/simpledb) which is based on aws-lib.\n\n## Usage\n\nThe following snippet implements an ec2 client and makes a call to DescribeInstances\n\n    var aws = require(\"aws-lib\");\n\n    ec2 = aws.createEC2Client(yourAccessKeyId, yourSecretAccessKey);\n\n    ec2.call(\"DescribeInstances\", {}, function(err, result) {\n      console.log(JSON.stringify(result));\n    })\n\nWhich returns a JSON response similar to:\n\n    [...]\n    {\"item\":{\n      \"instanceId\":\"i-acb2d1db\",\"imageId\":\"ami-03765c77\",\n      \"instanceState\": {\"code\":\"80\",\"name\":\"stopped\"},\n      \"privateDnsName\":{},\"dnsName\":{},\n      \"reason\":\"User initiated (2010-07-28 19:37:54 GMT)\"\n    [...] \n\nAnother example, using Product Advertising API:\n\n    prodAdv = aws.createProdAdvClient(yourAccessKeyId, yourSecretAccessKey, yourAssociateTag);\n\n    prodAdv.call(\"ItemSearch\", {SearchIndex: \"Books\", Keywords: \"Javascript\"}, function(err, result) {\n      console.log(JSON.stringify(result));\n    })\n\nWill return a long list of books.\n\nMost clients, such as ec2, ses, simpledb, etc. accept an optional third parameter `options` which should be an object of options used to instantiate the client.  For example, the ec2 client could be instantiated with an options object like:\n\n    ec2 = aws.createEC2Client(yourAccessKeyId, yourSecretAccessKey, {version: '2010-08-31'});\n    \nwhich would instantiate the ec2 client, but using the 2010-08-31 API version.  See the library code for each service to learn about other possible options.\n\nFor more examples have a look at [/examples](https://github.com/livelycode/aws-lib/tree/master/examples) and [/test](https://github.com/livelycode/aws-lib/tree/master/test).\n\n## Tests\nIn order to run the tests you need to copy \"test/credentials_template.js\" to \"test/credentials.js\" and add your access key and secret.  \ncredentials.js is part of .gitignore so you don't have to worry about accidentially commiting your secret.\n\nTo run the tests execute:\n\n    npm test\n\n\n## Contributing\naws-lib is designed to be easily extensible.  \nIf you want to add support for a service, have a look at an [existing client](https://github.com/livelycode/aws-lib/blob/master/lib/ec2.js) and simply follow the pattern.  \nWhen submitting a pull request please add a test for at least one API call.\n\nMany thanks to the following people who have contributed so far (ordered by number of commits):\n\n```\nMirko Kiefer\nPaul Bonser\nBernhard K. Weisshuhn\nKent\nDavid Valentiate\nRichard Rodger\nSean Coates\njohn\nJonathan Leibiusky\nMatt Duncan\nCameron Gray\nBryon\nnagoodman\nBlake Matheny\nVan Nguyen\nIan Ward\nJohannes Auer\nChris Castle\nMike MacCana\n```\n",
  "readmeFilename": "README.md",
  "_id": "aws-lib@0.1.4",
  "_from": "aws-lib"
}
